/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.qrl.Transaction');
goog.provide('proto.qrl.Transaction.CoinBase');
goog.provide('proto.qrl.Transaction.LatticePublicKey');
goog.provide('proto.qrl.Transaction.Message');
goog.provide('proto.qrl.Transaction.Slave');
goog.provide('proto.qrl.Transaction.Token');
goog.provide('proto.qrl.Transaction.Transfer');
goog.provide('proto.qrl.Transaction.TransferToken');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.qrl.AddressAmount');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.qrl.Transaction.oneofGroups_);
};
goog.inherits(proto.qrl.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.displayName = 'proto.qrl.Transaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.qrl.Transaction.oneofGroups_ = [[7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.qrl.Transaction.TransactiontypeCase = {
  TRANSACTIONTYPE_NOT_SET: 0,
  TRANSFER: 7,
  COINBASE: 8,
  LATTICEPK: 9,
  MESSAGE: 10,
  TOKEN: 11,
  TRANSFER_TOKEN: 12,
  SLAVE: 13
};

/**
 * @return {proto.qrl.Transaction.TransactiontypeCase}
 */
proto.qrl.Transaction.prototype.getTransactiontypeCase = function() {
  return /** @type {proto.qrl.Transaction.TransactiontypeCase} */(jspb.Message.computeOneofCase(this, proto.qrl.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrFrom: msg.getAddrFrom_asB64(),
    fee: jspb.Message.getFieldWithDefault(msg, 2, 0),
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transactionHash: msg.getTransactionHash_asB64(),
    transfer: (f = msg.getTransfer()) && proto.qrl.Transaction.Transfer.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.qrl.Transaction.CoinBase.toObject(includeInstance, f),
    latticepk: (f = msg.getLatticepk()) && proto.qrl.Transaction.LatticePublicKey.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.qrl.Transaction.Message.toObject(includeInstance, f),
    token: (f = msg.getToken()) && proto.qrl.Transaction.Token.toObject(includeInstance, f),
    transferToken: (f = msg.getTransferToken()) && proto.qrl.Transaction.TransferToken.toObject(includeInstance, f),
    slave: (f = msg.getSlave()) && proto.qrl.Transaction.Slave.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction}
 */
proto.qrl.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction;
  return proto.qrl.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction}
 */
proto.qrl.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddrFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 7:
      var value = new proto.qrl.Transaction.Transfer;
      reader.readMessage(value,proto.qrl.Transaction.Transfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 8:
      var value = new proto.qrl.Transaction.CoinBase;
      reader.readMessage(value,proto.qrl.Transaction.CoinBase.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 9:
      var value = new proto.qrl.Transaction.LatticePublicKey;
      reader.readMessage(value,proto.qrl.Transaction.LatticePublicKey.deserializeBinaryFromReader);
      msg.setLatticepk(value);
      break;
    case 10:
      var value = new proto.qrl.Transaction.Message;
      reader.readMessage(value,proto.qrl.Transaction.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 11:
      var value = new proto.qrl.Transaction.Token;
      reader.readMessage(value,proto.qrl.Transaction.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 12:
      var value = new proto.qrl.Transaction.TransferToken;
      reader.readMessage(value,proto.qrl.Transaction.TransferToken.deserializeBinaryFromReader);
      msg.setTransferToken(value);
      break;
    case 13:
      var value = new proto.qrl.Transaction.Slave;
      reader.readMessage(value,proto.qrl.Transaction.Slave.deserializeBinaryFromReader);
      msg.setSlave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.qrl.Transaction.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.qrl.Transaction.CoinBase.serializeBinaryToWriter
    );
  }
  f = message.getLatticepk();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.qrl.Transaction.LatticePublicKey.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.qrl.Transaction.Message.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.qrl.Transaction.Token.serializeBinaryToWriter
    );
  }
  f = message.getTransferToken();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.qrl.Transaction.TransferToken.serializeBinaryToWriter
    );
  }
  f = message.getSlave();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.qrl.Transaction.Slave.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qrl.Transaction.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.Transfer.displayName = 'proto.qrl.Transaction.Transfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrTo: msg.getAddrTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.Transfer}
 */
proto.qrl.Transaction.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.Transfer;
  return proto.qrl.Transaction.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.Transfer}
 */
proto.qrl.Transaction.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddrTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes addr_to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.Transfer.prototype.getAddrTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr_to = 1;
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {string}
 */
proto.qrl.Transaction.Transfer.prototype.getAddrTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddrTo()));
};


/**
 * optional bytes addr_to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Transfer.prototype.getAddrTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddrTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.Transfer.prototype.setAddrTo = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.qrl.Transaction.Transfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.qrl.Transaction.Transfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.CoinBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qrl.Transaction.CoinBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.CoinBase.displayName = 'proto.qrl.Transaction.CoinBase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.CoinBase.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.CoinBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.CoinBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.CoinBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrTo: msg.getAddrTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    headerhash: msg.getHeaderhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.CoinBase}
 */
proto.qrl.Transaction.CoinBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.CoinBase;
  return proto.qrl.Transaction.CoinBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.CoinBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.CoinBase}
 */
proto.qrl.Transaction.CoinBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddrTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeaderhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.CoinBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.CoinBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.CoinBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.CoinBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHeaderhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes addr_to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.CoinBase.prototype.getAddrTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr_to = 1;
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {string}
 */
proto.qrl.Transaction.CoinBase.prototype.getAddrTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddrTo()));
};


/**
 * optional bytes addr_to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.CoinBase.prototype.getAddrTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddrTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.CoinBase.prototype.setAddrTo = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.qrl.Transaction.CoinBase.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.qrl.Transaction.CoinBase.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 block_number = 3;
 * @return {number}
 */
proto.qrl.Transaction.CoinBase.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.qrl.Transaction.CoinBase.prototype.setBlockNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes headerhash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.CoinBase.prototype.getHeaderhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes headerhash = 4;
 * This is a type-conversion wrapper around `getHeaderhash()`
 * @return {string}
 */
proto.qrl.Transaction.CoinBase.prototype.getHeaderhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeaderhash()));
};


/**
 * optional bytes headerhash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeaderhash()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.CoinBase.prototype.getHeaderhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeaderhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.CoinBase.prototype.setHeaderhash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.LatticePublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qrl.Transaction.LatticePublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.LatticePublicKey.displayName = 'proto.qrl.Transaction.LatticePublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.LatticePublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.LatticePublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.LatticePublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    kyberPk: msg.getKyberPk_asB64(),
    dilithiumPk: msg.getDilithiumPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.LatticePublicKey}
 */
proto.qrl.Transaction.LatticePublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.LatticePublicKey;
  return proto.qrl.Transaction.LatticePublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.LatticePublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.LatticePublicKey}
 */
proto.qrl.Transaction.LatticePublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKyberPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDilithiumPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.LatticePublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.LatticePublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.LatticePublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKyberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDilithiumPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes kyber_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getKyberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes kyber_pk = 1;
 * This is a type-conversion wrapper around `getKyberPk()`
 * @return {string}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getKyberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKyberPk()));
};


/**
 * optional bytes kyber_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKyberPk()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getKyberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKyberPk()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.LatticePublicKey.prototype.setKyberPk = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes dilithium_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getDilithiumPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dilithium_pk = 2;
 * This is a type-conversion wrapper around `getDilithiumPk()`
 * @return {string}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getDilithiumPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDilithiumPk()));
};


/**
 * optional bytes dilithium_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDilithiumPk()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.LatticePublicKey.prototype.getDilithiumPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDilithiumPk()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.LatticePublicKey.prototype.setDilithiumPk = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qrl.Transaction.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.Message.displayName = 'proto.qrl.Transaction.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageHash: msg.getMessageHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.Message}
 */
proto.qrl.Transaction.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.Message;
  return proto.qrl.Transaction.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.Message}
 */
proto.qrl.Transaction.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes message_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.Message.prototype.getMessageHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message_hash = 1;
 * This is a type-conversion wrapper around `getMessageHash()`
 * @return {string}
 */
proto.qrl.Transaction.Message.prototype.getMessageHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageHash()));
};


/**
 * optional bytes message_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageHash()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Message.prototype.getMessageHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.Message.prototype.setMessageHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qrl.Transaction.Token.repeatedFields_, null);
};
goog.inherits(proto.qrl.Transaction.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.Token.displayName = 'proto.qrl.Transaction.Token';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qrl.Transaction.Token.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: msg.getSymbol_asB64(),
    name: msg.getName_asB64(),
    owner: msg.getOwner_asB64(),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initialBalancesList: jspb.Message.toObjectList(msg.getInitialBalancesList(),
    proto.qrl.AddressAmount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.Token}
 */
proto.qrl.Transaction.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.Token;
  return proto.qrl.Transaction.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.Token}
 */
proto.qrl.Transaction.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimals(value);
      break;
    case 5:
      var value = new proto.qrl.AddressAmount;
      reader.readMessage(value,proto.qrl.AddressAmount.deserializeBinaryFromReader);
      msg.addInitialBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOwner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getInitialBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.qrl.AddressAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes symbol = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.Token.prototype.getSymbol = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes symbol = 1;
 * This is a type-conversion wrapper around `getSymbol()`
 * @return {string}
 */
proto.qrl.Transaction.Token.prototype.getSymbol_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSymbol()));
};


/**
 * optional bytes symbol = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSymbol()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Token.prototype.getSymbol_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSymbol()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.Token.prototype.setSymbol = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes name = 2;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.Token.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes name = 2;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.qrl.Transaction.Token.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Token.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.Token.prototype.setName = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes owner = 3;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.Token.prototype.getOwner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes owner = 3;
 * This is a type-conversion wrapper around `getOwner()`
 * @return {string}
 */
proto.qrl.Transaction.Token.prototype.getOwner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwner()));
};


/**
 * optional bytes owner = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwner()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Token.prototype.getOwner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwner()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.Token.prototype.setOwner = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 decimals = 4;
 * @return {number}
 */
proto.qrl.Transaction.Token.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.qrl.Transaction.Token.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated AddressAmount initial_balances = 5;
 * @return {!Array.<!proto.qrl.AddressAmount>}
 */
proto.qrl.Transaction.Token.prototype.getInitialBalancesList = function() {
  return /** @type{!Array.<!proto.qrl.AddressAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qrl.AddressAmount, 5));
};


/** @param {!Array.<!proto.qrl.AddressAmount>} value */
proto.qrl.Transaction.Token.prototype.setInitialBalancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.qrl.AddressAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qrl.AddressAmount}
 */
proto.qrl.Transaction.Token.prototype.addInitialBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.qrl.AddressAmount, opt_index);
};


proto.qrl.Transaction.Token.prototype.clearInitialBalancesList = function() {
  this.setInitialBalancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.TransferToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qrl.Transaction.TransferToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.TransferToken.displayName = 'proto.qrl.Transaction.TransferToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.TransferToken.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.TransferToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.TransferToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.TransferToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenTxhash: msg.getTokenTxhash_asB64(),
    addrTo: msg.getAddrTo_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.TransferToken}
 */
proto.qrl.Transaction.TransferToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.TransferToken;
  return proto.qrl.Transaction.TransferToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.TransferToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.TransferToken}
 */
proto.qrl.Transaction.TransferToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenTxhash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddrTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.TransferToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.TransferToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.TransferToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.TransferToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddrTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes token_txhash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.TransferToken.prototype.getTokenTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes token_txhash = 1;
 * This is a type-conversion wrapper around `getTokenTxhash()`
 * @return {string}
 */
proto.qrl.Transaction.TransferToken.prototype.getTokenTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenTxhash()));
};


/**
 * optional bytes token_txhash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenTxhash()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.TransferToken.prototype.getTokenTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.TransferToken.prototype.setTokenTxhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes addr_to = 2;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.TransferToken.prototype.getAddrTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes addr_to = 2;
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {string}
 */
proto.qrl.Transaction.TransferToken.prototype.getAddrTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddrTo()));
};


/**
 * optional bytes addr_to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrTo()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.TransferToken.prototype.getAddrTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddrTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.TransferToken.prototype.setAddrTo = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.qrl.Transaction.TransferToken.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.qrl.Transaction.TransferToken.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qrl.Transaction.Slave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qrl.Transaction.Slave.repeatedFields_, null);
};
goog.inherits(proto.qrl.Transaction.Slave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.qrl.Transaction.Slave.displayName = 'proto.qrl.Transaction.Slave';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qrl.Transaction.Slave.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qrl.Transaction.Slave.prototype.toObject = function(opt_includeInstance) {
  return proto.qrl.Transaction.Slave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qrl.Transaction.Slave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Slave.toObject = function(includeInstance, msg) {
  var f, obj = {
    slavePksList: msg.getSlavePksList_asB64(),
    accessTypesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qrl.Transaction.Slave}
 */
proto.qrl.Transaction.Slave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qrl.Transaction.Slave;
  return proto.qrl.Transaction.Slave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qrl.Transaction.Slave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qrl.Transaction.Slave}
 */
proto.qrl.Transaction.Slave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSlavePks(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAccessTypesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.Slave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qrl.Transaction.Slave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qrl.Transaction.Slave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qrl.Transaction.Slave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlavePksList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getAccessTypesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated bytes slave_pks = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.qrl.Transaction.Slave.prototype.getSlavePksList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes slave_pks = 1;
 * This is a type-conversion wrapper around `getSlavePksList()`
 * @return {!Array.<string>}
 */
proto.qrl.Transaction.Slave.prototype.getSlavePksList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getSlavePksList()));
};


/**
 * repeated bytes slave_pks = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlavePksList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.qrl.Transaction.Slave.prototype.getSlavePksList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSlavePksList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.qrl.Transaction.Slave.prototype.setSlavePksList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.qrl.Transaction.Slave.prototype.addSlavePks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.qrl.Transaction.Slave.prototype.clearSlavePksList = function() {
  this.setSlavePksList([]);
};


/**
 * repeated uint32 access_types = 2;
 * @return {!Array.<number>}
 */
proto.qrl.Transaction.Slave.prototype.getAccessTypesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.qrl.Transaction.Slave.prototype.setAccessTypesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.qrl.Transaction.Slave.prototype.addAccessTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.qrl.Transaction.Slave.prototype.clearAccessTypesList = function() {
  this.setAccessTypesList([]);
};


/**
 * optional bytes addr_from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.prototype.getAddrFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr_from = 1;
 * This is a type-conversion wrapper around `getAddrFrom()`
 * @return {string}
 */
proto.qrl.Transaction.prototype.getAddrFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddrFrom()));
};


/**
 * optional bytes addr_from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrFrom()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.prototype.getAddrFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddrFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.prototype.setAddrFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.qrl.Transaction.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.qrl.Transaction.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes public_key = 3;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.qrl.Transaction.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.qrl.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 nonce = 5;
 * @return {number}
 */
proto.qrl.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.qrl.Transaction.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes transaction_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.qrl.Transaction.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes transaction_hash = 6;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.qrl.Transaction.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.qrl.Transaction.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.qrl.Transaction.prototype.setTransactionHash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional Transfer transfer = 7;
 * @return {?proto.qrl.Transaction.Transfer}
 */
proto.qrl.Transaction.prototype.getTransfer = function() {
  return /** @type{?proto.qrl.Transaction.Transfer} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.Transfer, 7));
};


/** @param {?proto.qrl.Transaction.Transfer|undefined} value */
proto.qrl.Transaction.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CoinBase coinbase = 8;
 * @return {?proto.qrl.Transaction.CoinBase}
 */
proto.qrl.Transaction.prototype.getCoinbase = function() {
  return /** @type{?proto.qrl.Transaction.CoinBase} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.CoinBase, 8));
};


/** @param {?proto.qrl.Transaction.CoinBase|undefined} value */
proto.qrl.Transaction.prototype.setCoinbase = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearCoinbase = function() {
  this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional LatticePublicKey latticePK = 9;
 * @return {?proto.qrl.Transaction.LatticePublicKey}
 */
proto.qrl.Transaction.prototype.getLatticepk = function() {
  return /** @type{?proto.qrl.Transaction.LatticePublicKey} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.LatticePublicKey, 9));
};


/** @param {?proto.qrl.Transaction.LatticePublicKey|undefined} value */
proto.qrl.Transaction.prototype.setLatticepk = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearLatticepk = function() {
  this.setLatticepk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasLatticepk = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Message message = 10;
 * @return {?proto.qrl.Transaction.Message}
 */
proto.qrl.Transaction.prototype.getMessage = function() {
  return /** @type{?proto.qrl.Transaction.Message} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.Message, 10));
};


/** @param {?proto.qrl.Transaction.Message|undefined} value */
proto.qrl.Transaction.prototype.setMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Token token = 11;
 * @return {?proto.qrl.Transaction.Token}
 */
proto.qrl.Transaction.prototype.getToken = function() {
  return /** @type{?proto.qrl.Transaction.Token} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.Token, 11));
};


/** @param {?proto.qrl.Transaction.Token|undefined} value */
proto.qrl.Transaction.prototype.setToken = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearToken = function() {
  this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasToken = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TransferToken transfer_token = 12;
 * @return {?proto.qrl.Transaction.TransferToken}
 */
proto.qrl.Transaction.prototype.getTransferToken = function() {
  return /** @type{?proto.qrl.Transaction.TransferToken} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.TransferToken, 12));
};


/** @param {?proto.qrl.Transaction.TransferToken|undefined} value */
proto.qrl.Transaction.prototype.setTransferToken = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearTransferToken = function() {
  this.setTransferToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasTransferToken = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Slave slave = 13;
 * @return {?proto.qrl.Transaction.Slave}
 */
proto.qrl.Transaction.prototype.getSlave = function() {
  return /** @type{?proto.qrl.Transaction.Slave} */ (
    jspb.Message.getWrapperField(this, proto.qrl.Transaction.Slave, 13));
};


/** @param {?proto.qrl.Transaction.Slave|undefined} value */
proto.qrl.Transaction.prototype.setSlave = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.qrl.Transaction.oneofGroups_[0], value);
};


proto.qrl.Transaction.prototype.clearSlave = function() {
  this.setSlave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.qrl.Transaction.prototype.hasSlave = function() {
  return jspb.Message.getField(this, 13) != null;
};


